# -*- coding: utf-8 -*-
"""Bialetti con il cambio.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VHvK3D4L-Q2LKVRzw9MuWJkS8_XCPJ7_
"""



df = pd.read_csv('Export Spedire - db_bialetti (1).csv')
df.head()

df.isnull().values.any()
df.isnull().sum().sum()

df=df.fillna( method='ffill')

df['Giorno'] = pd.to_datetime(df['Giorno'],dayfirst=True, yearfirst=False)
df.dtypes

categorical= [
  'day_week', 'month','ios_14'
]

numerical=[
    'fb_spent','google_spent','organico','cambio_penusd'
]

all_features = categorical + numerical

transformers =[
  ('one hot', OneHotEncoder(handle_unknown='ignore'),categorical),
  ('scaler', QuantileTransformer(), numerical),
  ('normalizer',Normalizer(), all_features)
]


ct = ColumnTransformer(transformers)


steps =[
 ('column_transformer',ct),
 ('model', MLPRegressor())
]

pipeline= Pipeline(steps)

pipeline

param_space={
    'column_transformer__scaler__n_quantiles':[80,100,120],
    'column_transformer__normalizer':[ Normalizer(), 'passthrough' ],
    'model__hidden_layer_sizes':[(35,35),(50,50),(75,75)],
    'model__alpha':[0.005, 0.001]
}

grid = GridSearchCV(pipeline, param_grid=param_space, cv=3, verbose=2)
grid

X = df[all_features]
y= df['Transazioni']

X_train, X_test,y_train, y_test = train_test_split(X,y,test_size=0.2 )

grid.fit(X_train, y_train)

grid.best_estimator_

grid.best_params_

grid.score(X_test, y_test)

dump(grid.best_estimator_, 'neural_bialetti.joblib')

pipe = load('neural_bialetti.joblib')
     
pipe.score(X_test, y_test)

prediction = pipe.predict(df)
df['prediction']= prediction
df['error'] = df['Transazioni']-df['prediction']
df.tail(10)

sns.distplot(df['error'])

sns.lineplot(data= df, x='Giorno', y= 'Transazioni')
sns.lineplot(data= df, x='Giorno', y= 'prediction')

plot_partial_dependence(pipe, X_test, features=['google_spent'])
plot_partial_dependence(pipe, X_test, features=['fb_spent'])
plot_partial_dependence(pipe, X_test, features=['organico'])
plot_partial_dependence(pipe, X_test, features=['cambio_penusd'])

mae(y_test, pipe.predict(X_test))

